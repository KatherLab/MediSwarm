# Use the specified PyTorch image as the base
ARG PYTORCH_IMAGE=pytorch/pytorch:2.2.2-cuda12.1-cudnn8-runtime
FROM ${PYTORCH_IMAGE}

# Specify the NVFlare version
ARG NVF_VERSION=2.4.1
ENV NVF_BRANCH=${NVF_VERSION}

# Set the Python version
ENV PYTHON_VERSION=3.10.14

# Install updates of installed packages
RUN apt update

RUN apt install -y apt apt-utils libapt-pkg6.0

# Update versions of installed packages
RUN apt install -y base-files bash bsdutils ca-certificates coreutils dpkg e2fsprogs gpgv libblkid1 libc-bin libc-dev-bin libc6-dev libc6 libcap2 libcom-err2 libext2fs2 libgnutls30 libgssapi-krb5-2 libk5crypto3 libkrb5-3 libkrb5support0 libmount1 libpam-modules-bin libpam-modules libpam-runtime libpam0g libseccomp2 libsmartcols1 libss2 libssl3 libsystemd0 libtasn1-6 libudev1 libuuid1 linux-libc-dev login logsave mount openssl passwd util-linux

# Install apt-transport-https curl gnupg lsb-release zip and dependencies at defined versions
RUN apt install -y apt-transport-https curl dirmngr distro-info-data gnupg-l10n gnupg-utils gnupg gpg-agent gpg-wks-client gpg-wks-server gpg gpgconf gpgsm libassuan0 libbrotli1 libcurl4 libexpat1 libksba8 libldap-2.5-0 libldap-common libmpdec3 libnghttp2-14 libnpth0 libpsl5 libpython3-stdlib libpython3.10-minimal libpython3.10-stdlib libreadline8 librtmp1 libsasl2-2 libsasl2-modules-db libsasl2-modules libsqlite3-0 libssh-4 lsb-release media-types pinentry-curses publicsuffix python3-minimal python3.10-minimal python3.10 python3 readline-common unzip zip

# Prepare Docker installation
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc \
    && chmod a+r /etc/apt/keyrings/docker.asc \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt update

# Install docker-ce docker-ce-cli containerd.io and dependencies at fixed versions
RUN apt install -y apparmor containerd.io dbus-user-session dbus dmsetup docker-buildx-plugin docker-ce-cli docker-ce-rootless-extras docker-ce docker-compose-plugin gir1.2-glib-2.0 git-man git iptables less libapparmor1 libargon2-1 libbsd0 libcbor0.8 libcryptsetup12 libcurl3-gnutls libdbus-1-3 libdevmapper1.02.1 libedit2 liberror-perl libfido2-1 libgdbm-compat4 libgdbm6 libgirepository-1.0-1 libglib2.0-0 libglib2.0-data libicu70 libip4tc2 libip6tc2 libjson-c5 libkmod2 libltdl7 libmd0 libmnl0 libnetfilter-conntrack3 libnfnetlink0 libnftnl11 libnss-systemd libpam-systemd libperl5.34 libslirp0 libx11-6 libx11-data libxau6 libxcb1 libxdmcp6 libxext6 libxml2 libxmuu1 libxtables12 netbase networkd-dispatcher openssh-client patch perl-base perl-modules-5.34 perl pigz python3-dbus python3-gi shared-mime-info slirp4netns systemd-sysv systemd-timesyncd systemd xauth xdg-user-dirs xz-utils

# Clean up apt cache
RUN rm -rf /var/lib/apt/lists/*

# uninstall conda to prevent usage and avoid and potential repository license issues
RUN python3 -m pip uninstall -y conda conda-package-handling conda_index

# Install specific versions of pip and setuptools
RUN python3 -m pip install -U pip==25.1.1 setuptools==80.8.0

# Install dependencies of NVFlare at fixed versions
RUN python3 -m pip install --upgrade psutil==7.0.0
RUN python3 -m pip install Flask==3.0.2 Flask-JWT-Extended==4.6.0 Flask-SQLAlchemy==3.1.1 PyJWT==2.10.1 SQLAlchemy==2.0.16 Werkzeug==3.0.1 blinker==1.9.0 docker==7.1.0 greenlet==3.2.2 grpcio==1.62.1 gunicorn==23.0.0 itsdangerous==2.2.0 msgpack==1.1.0 protobuf==4.24.4 pyhocon==0.3.61 pyparsing==3.2.3 websockets==15.0.1

# Install additional Python packages for application code at defined versions
RUN python3 -m pip install Deprecated==1.2.18 SimpleITK==2.5.0 absl-py==2.2.2 aiohttp==3.11.18 aiosignal==1.3.2 async-timeout==5.0.1 cachetools==5.5.2 contourpy==1.3.2 cycler==0.12.1 et-xmlfile==2.0.0 fonttools==4.58.0 frozenlist==1.6.0 google-auth-oauthlib==1.2.2 google-auth==2.40.2 huggingface_hub==0.29.3 datasets==3.4.1 coral_pytorch==1.4.0 humanize==4.12.3 joblib==1.5.1 kiwisolver==1.4.8 lightning-utilities==0.14.3 markdown-it-py==3.0.0 markdown==3.8 matplotlib==3.9.2 mdurl==0.1.2 monai==1.4.0 multidict==6.4.4 nibabel==5.3.2 oauthlib==3.2.2 openpyxl==3.1.5 pandas==2.2.3 numpy==1.26.4 pyasn1-modules==0.4.2 pyasn1==0.6.1 pydicom==3.0.1 python-dateutil==2.9.0.post0 x-transformers==2.3.5 pytorch-lightning==2.4.0 requests==2.32.3 requests-oauthlib==2.0.0 rich==14.0.0 rsa==4.9.1 safetensors==0.5.3 scikit-learn==1.5.2 scipy==1.15.3 seaborn==0.13.2 wandb==0.18.6 einops==0.8.0 shellingham==1.5.4 tensorboard-data-server==0.7.2 tensorboard-plugin-wit==1.8.1 tensorboard==2.19.0 threadpoolctl==3.6.0 timm==1.0.15 torchio==0.20.1 torchmetrics==1.7.1 torchvision==0.17.2 torchaudio==2.2.2 tqdm==4.67.0 typer==0.15.4 tzdata==2025.2 wrapt==1.17.2 yarl==1.20.0 aiohappyeyeballs==2.6.1 annotated-types==0.7.0 dill==0.3.8 docker-pycreds==0.4.0 einx==0.3.0 frozendict==2.4.6 gitdb==4.0.12 gitpython==3.1.44 hf-xet==1.1.2 importlib-resources==6.5.2 loguru==0.7.3 multiprocess==0.70.16 propcache==0.3.1 pyarrow==20.0.0 pydantic==2.11.5 pydantic-core==2.33.2 sentry-sdk==2.29.1 setproctitle==1.3.6 smmap==5.0.2 typing-extensions==4.13.2 typing-inspection==0.4.1 xxhash==3.5.0

# Install packages needed for testing and for listing licenses of installed packages
RUN python3 -m pip install coverage==7.8.2 mock==5.2.0
RUN python3 -m pip install pip-licenses==5.0.0 prettytable==3.16.0

# Clean up pip cache
RUN python3 -m pip cache purge

# install ODELIA fork of NVFlare from local source
WORKDIR /workspace/
COPY ./MediSwarm/docker_config/NVFlare /workspace/nvflare
## use startup kit template in the dashboard
COPY ./MediSwarm/docker_config/master_template.yml /workspace/nvflare/nvflare/lighter/impl/
RUN python3 -m pip install /workspace/nvflare
RUN rm -rf /workspace/nvflare

# Install the ODELIA controller package from local source
COPY ./MediSwarm/controller /workspace/controller
RUN python3 -m pip install /workspace/controller
RUN rm -rf /workspace/controller

# Copy the source code for local training and deploying to the swarm
COPY ./MediSwarm /MediSwarm
RUN mkdir -p /fl_admin/transfer
RUN ln -s /MediSwarm /fl_admin/transfer/MediSwarm

# Copy pre-trained model weights to image
COPY ./torch_home_cache /torch_home