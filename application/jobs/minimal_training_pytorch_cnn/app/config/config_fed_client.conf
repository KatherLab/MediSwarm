{
  format_version = 2
  app_script = "main.py"
  app_config = ""
  executors = [
    {
      tasks = [
        "train"
      ]
      executor {
        path = "nvflare.app_opt.pt.client_api_launcher_executor.PTClientAPILauncherExecutor"
        args {
          launcher_id = "launcher"
          pipe_id = "pipe"
          last_result_transfer_timeout = 36000.0,
          external_pre_init_timeout = 36000.0,
          peer_read_timeout = 36000.0,
          heartbeat_timeout = 36000.0,
          params_exchange_format = "pytorch"
          params_transfer_type = "DIFF"
          train_with_evaluation = true
        }
      }
    }
    {
      # All tasks prefixed with swarm_ are routed to SwarmClientController
      tasks = ["swarm_*"]
      executor {
        # client-side controller for training and logic and aggregation management
        path = "controller.SwarmClientController"
        args {
          # train task must be implemented by Executor
          learn_task_name = "train"
          # ids must map to corresponding components
          persistor_id = "persistor"
          aggregator_id = "aggregator"
          shareable_generator_id = "shareable_generator"
          min_responses_required = 2

          learn_task_abort_timeout = 36000
          learn_task_ack_timeout = 36000
          learn_task_timeout = 36000
          final_result_ack_timeout = 36000
          wait_time_after_min_resps_received =  36000
        }
      }
    }
  ]
  task_data_filters = []
  task_result_filters = []
  components = [
    {
      id = "launcher"
      path = "nvflare.app_common.launchers.subprocess_launcher.SubprocessLauncher"
      args {
        script = "python3 custom/{app_script}  {app_config} "
        launch_once = true
      }
    }
        {
      id = "aggregator"
      path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator"
      args {
        expected_data_kind = "WEIGHT_DIFF"
      }
    }
    {
      id = "pipe"
      path = "nvflare.fuel.utils.pipe.cell_pipe.CellPipe"
      args {
        mode = "PASSIVE"
        site_name = "{SITE_NAME}"
        token = "{JOB_ID}"
        root_url = "{ROOT_URL}"
        secure_mode = "{SECURE_MODE}"
        workspace_dir = "{WORKSPACE}"
      }
    }
      {
    id = "persistor"
    path = "nvflare.app_opt.pt.file_model_persistor.PTFileModelPersistor"
    args {
      model {
        path = "models.models_for_testing.MiniCNNForTesting"
      }
    }
  }
    {
    id = "shareable_generator"
    path = "nvflare.app_common.ccwf.comps.simple_model_shareable_generator.SimpleModelShareableGenerator"
    args {}
  }
    {
      id = "metrics_pipe"
      path = "nvflare.fuel.utils.pipe.cell_pipe.CellPipe"
      args {
        mode = "PASSIVE"
        site_name = "{SITE_NAME}"
        token = "{JOB_ID}"
        root_url = "{ROOT_URL}"
        secure_mode = "{SECURE_MODE}"
        workspace_dir = "{WORKSPACE}"
      }
    }
    {
      id = "metric_relay"
      path = "nvflare.app_common.widgets.metric_relay.MetricRelay"
      args {
        pipe_id = "metrics_pipe"
        event_type = "fed.analytix_log_stats"
        read_interval = 0.1
      }
    }
      {
    id = "model_selector"
    path = "nvflare.app_common.widgets.intime_model_selector.IntimeModelSelector"
    args {
      key_metric = "val/ACC"
    }
  }
    {
      id = "config_preparer"
      path = "nvflare.app_common.widgets.external_configurator.ExternalConfigurator"
      args {
        component_ids = [
          "metric_relay"
        ]
      }
    }
  ]
}
